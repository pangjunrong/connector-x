name: linux-aarch-test

on:
    push:
      branches:
        - linux-aarch-test

jobs:
    linux-aarch:
        runs-on: ubuntu-latest
        strategy:
          matrix:
            python-version: ["3.10", "3.11", "3.12", "3.13"]
        steps:
          - name: Checkout Repository
            uses: actions/checkout@v4
        
          - name: Verify OS and Architecture
            run: |
                echo "OS: $(uname -s)"
                echo "Architecture: $(uname -m)"

          - name: Build Wheel
            uses: PyO3/maturin-action@v1
            with:
              rust-toolchain: stable
              maturin-version: v1.7.4
              manylinux: 2_28
              command: build
              args: -m connectorx-python/Cargo.toml --target aarch64-unknown-linux-musl -i python${{ matrix.python-version }} --release
              before-script-linux: |
                python${{ matrix.python-version }} -m ensurepip --upgrade
                echo "OS: $(uname -s)"
                echo "Architecture: $(uname -m)"
            env:
              SQLITE3_STATIC: 1
  
          - name: Copy J4RS Dependencies
            run: |
              cp -rf connectorx-python/target/aarch64-unknown-linux-musl/release/jassets connectorx-python/connectorx/dependencies
              
          - name: Rebuild Wheel
            uses: PyO3/maturin-action@v1
            with:
              rust-toolchain: stable
              maturin-version: v1.7.4
              manylinux: 2_28
              command: build
              args: -m connectorx-python/Cargo.toml --target aarch64-unknown-linux-musl -i python${{ matrix.python-version }} --release
              before-script-linux:
                python${{ matrix.python-version }} -m ensurepip --upgrade
            env:
              SQLITE3_STATIC: 1
            
          - name: Upload Artifact
            uses: actions/upload-artifact@v4
            with:
              name: "linux-arm-${{ matrix.python-version }}"
              path: connectorx-python/target/wheels/*.whl

    verify-linux-arm:
        runs-on: ${{ matrix.os }}
        needs: [linux-aarch]
        strategy:
            matrix:
                python-version: ["3.10", "3.11", "3.12", "3.13"]
                os: [ubuntu-latest]
        steps:
          - name: Checkout Repository
            uses: actions/checkout@v4

          # Set up QEMU for ARM64 emulation to allow ARM64 container compatibility on x86_64 runners
          - name: Setup QEMU
            uses: docker/setup-qemu-action@v2
            with:
              platforms: linux/arm64
    
            # Set up Docker Buildx with ARM support, which is necessary for building and running ARM containers on x86_64
          - name: Setup Buildx
            uses: docker/setup-buildx-action@v2
            with:
              driver-opts: network=host
    
          - name: Setup Python
            uses: actions/setup-python@v5
            with:
              python-version: ${{ matrix.python-version }}
    
          - name: Download Artifact
            uses: actions/download-artifact@v4
            with:
              name: "linux-arm-${{ matrix.python-version }}"
    
          # Run the tests in an ARM64-compatible container
          - name: Run ARM64-Compatible Python Container
            run: |
              docker run --rm -v "$(pwd):/app" -w /app --platform linux/arm64 arm64v8/python:${{ matrix.python-version }} /bin/bash -c "
                pip install *.whl &&
                python -c 'import connectorx'"
