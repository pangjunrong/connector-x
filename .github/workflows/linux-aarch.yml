name: linux-aarch-test

on:
    push:
      branches:
        - linux-aarch-test

jobs:
    linux-aarch:
        runs-on: ubuntu-latest
        strategy:
          matrix:
            python-version: ["3.10", "3.11", "3.12", "3.13"]
        steps:
          - name: Checkout Repository
            uses: actions/checkout@v4
  
          - name: Setup QEMU
            uses: docker/setup-qemu-action@v2
            with:
              platforms: aarch64
  
        #   - name: Setup Buildx
        #     uses: docker/setup-buildx-action@v2
          
        #   - name: Setup Python
        #     uses: actions/setup-python@v5
        #     with:
        #       python-version: ${{ matrix.python-version }}
  
        #   - name: Setup Rust
        #     uses: actions-rs/toolchain@v1
        #     with:
        #       toolchain: stable
        #       components: rustfmt
        #       target: aarch64-unknown-linux-gnu
        #       default: true
  
        #   - name: Setup Just
        #     uses: extractions/setup-just@v2
        #     env:
        #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
        #   - name: Install Tools
        #     run: |
        #       sudo apt-get update -y
        #       sudo apt-get install -y mysql-client libpq-dev freetds-dev krb5-locales clang libkrb5-dev build-essential gcc
              
        #   - name: Setup Poetry
        #     uses: Gr1N/setup-poetry@v9
  
        #   - name: Setup Project
        #     run: |
        #       just bootstrap-python
        
          - name: Verify OS and Architecture
            run: |
                echo "OS: $(uname -s)"
                echo "Architecture: $(uname -m)"

          - name: Build Wheel
            uses: PyO3/maturin-action@v1
            with:
              rust-toolchain: stable
              maturin-version: v1.7.4
              manylinux: 2_28
              command: build
              args: -m connectorx-python/Cargo.toml --target aarch64-unknown-linux-gnu -i python${{ matrix.python-version }} --release
              before-script-linux: |
                sudo dpkg --add-architecture arm64
                sudo apt-get install libkrb5-dev:arm64 libssl-dev:arm64 clang:arm64
                sudo apt-get install -y libkrb5-dev libc6-dev libssl-dev clang gcc-multilib build-essential pkg-config
                pkg-config --libs krb5
              sccache: true
            env:
              SQLITE3_STATIC: 1
              LIBRARY_PATH: /usr/aarch64-unknown-linux-gnu/lib:$LIBRARY_PATH
              LD_LIBRARY_PATH: /usr/aarch64-linux-gnu/lib:$LD_LIBRARY_PATH
              PKG_CONFIG_PATH: /usr/aarch64-linux-gnu/lib/pkgconfig:$PKG_CONFIG_PATH
  
          - name: Copy J4RS Dependencies
            run: |
              cp -rf connectorx-python/target/aarch64-unknown-linux-gnu/release/jassets connectorx-python/connectorx/dependencies
              
          - name: Rebuild Wheel
            uses: PyO3/maturin-action@v1
            with:
              rust-toolchain: stable
              maturin-version: v1.7.4
              manylinux: 2_28
              command: build
              args: -m connectorx-python/Cargo.toml --target aarch64-unknown-linux-gnu -i python${{ matrix.python-version }} --release
              before-script-linux: sudo apt-get install -y libkrb5-dev libc6-dev libssl-dev clang gcc-multilib build-essential pkg-config
              sccache: true
            env:
              SQLITE3_STATIC: 1
              LIBRARY_PATH: /usr/aarch64-unknown-linux-gnu/lib:$LIBRARY_PATH
            
          - name: Upload Artifact
            uses: actions/upload-artifact@v4
            with:
              name: "linux-arm-${{ matrix.python-version }}"
              path: connectorx-python/target/wheels/*.whl

    verify-linux-arm:
        runs-on: ${{ matrix.os }}
        needs: [linux-aarch]
        strategy:
            matrix:
                python-version: ["3.10", "3.11", "3.12", "3.13"]
                os: [ubuntu-latest]
        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4

            - name: Download Artifact
              uses: actions/download-artifact@v4
              with:
                name: "linux-arm-${{ matrix.python-version }}"

            # Run the tests in an ARM64-compatible container
            - name: Run ARM64-Compatible Python Container
              run: |
                docker run --rm -v "$(pwd):/app" -w /app --platform linux/arm64 arm64v8/python:${{ matrix.python-version }} /bin/bash -c "
                pip install *.whl &&
                python -c 'import connectorx'"
